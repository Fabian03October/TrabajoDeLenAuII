
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 09 15:19:49 GMT-06:00 2024
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 09 15:19:49 GMT-06:00 2024
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\003" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\006\004\006\015\004\001\002\000\024\002" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\001\002\000\004\002\000\001\002\000" +
    "\006\004\006\015\004\001\002\000\022\002\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\023\012\022\013\024\014\021\001" +
    "\002\000\004\002\020\001\002\000\012\002\ufffc\006\012" +
    "\007\013\010\014\001\002\000\006\004\006\015\004\001" +
    "\002\000\006\004\006\015\004\001\002\000\006\004\006" +
    "\015\004\001\002\000\004\002\ufffd\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\006\004\006\015\004\001\002\000\006\004" +
    "\006\015\004\001\002\000\006\004\006\015\004\001\002" +
    "\000\006\004\006\015\004\001\002\000\024\002\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\001\002\000\024\002\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\024\014\021\001\002" +
    "\000\024\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\024\014\021\001\002\000\024\002\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\001\002\000\014\005\032\011\023\012\022" +
    "\013\024\014\021\001\002\000\024\002\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\012\002\007\003\004\004\010\005\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\016\005\006\001\001\000\006\004\015" +
    "\005\006\001\001\000\006\004\014\005\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\027\001\001\000\004\005\026\001" +
    "\001\000\004\005\025\001\001\000\004\005\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Declaración de la variable para manejo de errores */
    private Symbol s;
    
    /* Método para manejar errores de sintaxis */
    public void syntax_error(Symbol s){
        this.s = s;     
    }

    /* Método para obtener el último símbolo con error */
    public Symbol getS(){
        return this.s;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operacion ::= AbrirParentesis operacion CerrarParentesis 
            {
              Double RESULT =null;
		int unoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int unoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Double uno = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = uno; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operacion ::= Numero 
            {
              Double RESULT =null;
		int unoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int unoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String uno = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Double(uno); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operacion ::= operacion Division operacion 
            {
              Double RESULT =null;
		int unoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int unoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Double uno = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double dos = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = uno / dos; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operacion ::= operacion Multiplicacion operacion 
            {
              Double RESULT =null;
		int unoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int unoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Double uno = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double dos = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = uno * dos; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operacion ::= operacion Resta operacion 
            {
              Double RESULT =null;
		int unoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int unoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Double uno = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double dos = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = uno - dos; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operacion ::= operacion Suma operacion 
            {
              Double RESULT =null;
		int unoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int unoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Double uno = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double dos = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = uno + dos; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= operacion 
            {
              Object RESULT =null;
		int unoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int unoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double uno = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = uno; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        RESULT = exp1; 
        System.out.println("Resultado= " + exp1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresiones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresiones ::= expresion Igual expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        RESULT = exp1; 
        RESULT = exp2; 
        System.out.println( "Validacion: " + exp1.equals(exp2)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresiones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresiones ::= expresion MenorQue expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        RESULT = exp1;
        RESULT= exp2;
        System.out.println(" Validacion: " + ((Double)exp1 < (Double)(exp2))); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresiones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresiones ::= expresion MayorQue expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        RESULT = exp1;
        RESULT = exp2;
        System.out.println(" Validacion: " + ((Double)exp1 > (Double)exp2)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresiones",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= expresiones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

